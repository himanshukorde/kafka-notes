Apache Kafka
___________

-> It acts as mediator to exchange messages (Message Broker)
-> Kafka is very useful for real time data exchange
-> Publisher will publish the message and subscriber will consume the message

Example of Kafka:

Scenario: 10 Customers Place Orders at Udupi Hotel
Step 1: Customers Place Orders
‚úÖ Customer App (Producer) ‚Üí Publishes each order to Kafka (order_topic).
‚úÖ Udupi Hotel (Consumer) ‚Üí Subscribes to order_topic and consumes the orders in real-time.

üîÑ Kafka Flow:

10 Customers ---> [Kafka: order_topic] ---> Udupi Hotel App

Step 2: Udupi Hotel Accepts the Orders
‚úÖ Udupi Hotel (Producer) ‚Üí Publishes an "Order Accepted" event to order_status_topic.
‚úÖ Customer App (Consumer) ‚Üí Subscribes to order_status_topic and receives notifications.

üîÑ Kafka Flow:

Udupi Hotel ---> [Kafka: order_status_topic] ---> 10 Customers
üîπ Summary of the Pub/Sub Model
Step	Producer	Kafka Topic	Consumer	Purpose
Customer places order	Customer App	order_topic	Udupi Hotel App	Order received at restaurant
Udupi Hotel accepts order	Udupi Hotel App	order_status_topic	Customer App	Order confirmation notification


üîπ When to Store in Database?
‚úîÔ∏è YES ‚Äì When the customer places an order ‚Üí Store in DB (orders table).
‚úîÔ∏è YES ‚Äì When the order is completed ‚Üí Update order status in DB.
‚ùå NO ‚Äì For real-time updates (use Kafka instead).


Kafka Architecture:

1. Zookeeper  - This provides environment to run kafka server
2. Kafka Server  - This acts as message broker
3. Kafka Topic - It is used to store and queue messages
4. Publisher - This will push messages to kafkatopic
5. Subscriber - This will fetch the message that is pushed to kafka by publisher

Kafka Partationing:

A Kafka topic is split into partitions, which are individual logs where records are stored sequentially and immutably.
Partitioning = Horizontal scaling of a topic.

When producer produce message it goes in kafka topic inside partations in round robin fashion.
There can be multiple partations in a kafka topic.

Kafka ensures message order only within a partition, not the whole topic.
Choose the key wisely if order is important.

If we want to order messages then it should go in same partation. but because of message goes in round robin fashion in multiple partations,
we sends key with message. i.e same key message will go in same partations. kafka ensures message order only within a partition. so we get message in order.

Consumer Offeset :
-------------------
When a consumer group reads message from a tpoic, each member of the group maintains its own offset and update it, as it consume message.

So what is consumer offset ?
A consumer offset is a pointer that tells how much data a consumer has read from a Kafka partition.
Think of it like a bookmark in a log file.

üîß How it Works:
Each Kafka partition is an ordered log of messages with a unique offset (starting from 0).

Example (Partition 0):
Offset:     0     1     2     3
Message:  msg1  msg2  msg3  msg4

If a consumer has read up to msg2, the offset is 2.
The next poll will start from offset 2 or 3, depending on configuration.

üíæ Where Offsets are Stored?
Kafka stores offsets in an internal topic called: __consumer_offsets.
Alternatively, consumers can manually manage offsets (e.g., in a DB).




Steps to setup kafka in windows:

Step-1 : Download Zookeeper:

   URL : https://dlcdn.apache.org/zookeeper/zookeeper-3.9.2/apache-zookeeper-3.9.2-bin.tar.gz
   URL : https://dlcdn.apache.org/zookeeper/zookeeper-3.8.4/apache-zookeeper-3.8.4-bin.tar.gz

Step-2 : Download Apache Kafka:

	URL : https://downloads.apache.org/kafka/3.8.0/kafka_2.12-3.8.0.tgz

Step-3 : Set Path of ZOOKEEPER in Environment variables upto bin folder.

Step 4: Copy "zookeeper.properties" and "server.properties" files from "kafka/config" folder to "kafka/bin/windows" folder.

Step-5 : Start Zookeeper server from "kafka/bin/windows" root folder

    Command : zookeeper-server-start.bat zookeeper.properties

Step-6: Start Kafka Server using below command from "kafka/bin/windows" folder

    Command : kafka-server-start.bat server.properties

Note: If kafka server is stopped, delete kafka logs from temp folder and try again to start kafka server

Step-7 : Create Kakfa Topic from "kafka/bin/windows" root folder

Command : kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic order_topic_1

Step-8 : View created Topics using below command

   Command : kafka-topics.bat --list --bootstrap-server localhost:9092


Kafka Bootstrap Server URL : http://localhost:9092/ or http://192.30.43.2:9092/ for linux server created in cloud


